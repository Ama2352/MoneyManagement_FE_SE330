package DI.Utils

import DI.Models.Currency.CurrencyRates
import android.content.Context
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext
import java.util.Locale

/**
 * Budget Notification Translator
 * 
 * Handles translation and currency formatting for budget notifications
 * based on app's current language and currency settings
 */
object BudgetNotificationTranslator {
    
    /**
     * Main function to translate and format notification messages
     * Uses app's current locale and currency preference
     */
    @Composable
    fun translate(
        message: String,
        isVND: Boolean,
        exchangeRates: CurrencyRates?
    ): String {
        val context = LocalContext.current
        val isVietnamese = isAppInVietnamese(context)
        
        // Step 1: Translate the message based on current language
        val translatedMessage = if (isVietnamese) {
            translateToVietnamese(message)
        } else {
            message // Keep English
        }
        
        // Step 2: Convert currency amounts in the message
        return convertCurrencyInMessage(translatedMessage, isVND, exchangeRates)
    }
    
    /**
     * Check if app is currently in Vietnamese
     */
    private fun isAppInVietnamese(context: Context): Boolean {
        return context.resources.configuration.locale.language == "vi"
    }
    
    /**
     * Translate English notification messages to Vietnamese
     */
    private fun translateToVietnamese(message: String): String {
        // If already contains Vietnamese characters, return as is
        if (containsVietnamese(message)) {
            return message
        }
        
        // Pattern-based translation
        return when {
            // Budget spending patterns
            message.contains("You have spent") && message.contains("of your budget") -> {
                val amounts = extractAmounts(message)
                val percentage = extractPercentage(message)
                
                when {
                    amounts.size >= 2 && percentage != null -> 
                        "üí∞ B·∫°n ƒë√£ chi ti√™u ${amounts[0]} trong t·ªïng ng√¢n s√°ch ${amounts[1]} (${percentage}%)"
                    amounts.size >= 2 -> 
                        "üí∞ B·∫°n ƒë√£ chi ti√™u ${amounts[0]} trong t·ªïng ng√¢n s√°ch ${amounts[1]}"
                    percentage != null ->
                        "üìä B·∫°n ƒë√£ s·ª≠ d·ª•ng ${percentage}% ng√¢n s√°ch"
                    else -> "üí∞ B·∫°n ƒë√£ chi ti√™u m·ªôt ph·∫ßn ng√¢n s√°ch"
                }
            }
            
            // Budget exceeded
            message.contains("Budget limit exceeded") || message.contains("over budget") -> {
                val amounts = extractAmounts(message)
                when {
                    amounts.size >= 2 -> "üö® V∆∞·ª£t gi·ªõi h·∫°n! Chi ti√™u: ${amounts[0]}, H·∫°n m·ª©c: ${amounts[1]}"
                    amounts.size == 1 -> "üö® V∆∞·ª£t gi·ªõi h·∫°n ng√¢n s√°ch: ${amounts[0]}"
                    else -> "üö® ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n ng√¢n s√°ch"
                }
            }
            
            // Status messages
            message.contains("on track") -> "‚úÖ ƒê√∫ng k·∫ø ho·∫°ch - Chi ti√™u h·ª£p l√Ω"
            message.contains("Under budget") -> "üíö D∆∞·ªõi ng√¢n s√°ch - Ti·∫øt ki·ªám t·ªët!"
            message.contains("Minimal spending") -> "üíé Chi ti√™u t·ªëi thi·ªÉu"
            message.contains("not started") -> "üïê Ng√¢n s√°ch ch∆∞a b·∫Øt ƒë·∫ßu"
            message.contains("Budget completed") -> "‚úÖ Ng√¢n s√°ch ƒë√£ ho√†n th√†nh"
            
            // Warning levels
            message.contains("Warning") && message.contains("% of budget") -> {
                val percentage = extractPercentage(message)
                if (percentage != null) {
                    "‚ö†Ô∏è C·∫£nh b√°o: ƒê√£ d√πng ${percentage}% ng√¢n s√°ch"
                } else {
                    "‚ö†Ô∏è C·∫£nh b√°o: Chi ti√™u cao"
                }
            }
            
            message.contains("Critical") && message.contains("% of budget") -> {
                val percentage = extractPercentage(message)
                if (percentage != null) {
                    "üö® Nguy hi·ªÉm: ƒê√£ d√πng ${percentage}% ng√¢n s√°ch"
                } else {
                    "üö® M·ª©c chi ti√™u nguy hi·ªÉm"
                }
            }
            
            // Nearly maxed
            message.contains("Nearly maxed") || message.contains("nearly exceeded") -> {
                val amounts = extractAmounts(message)
                if (amounts.size >= 2) {
                    "‚ö° G·∫ßn h·∫øt h·∫°n m·ª©c: ${amounts[0]} / ${amounts[1]}"
                } else {
                    "‚ö° G·∫ßn ƒë·∫°t gi·ªõi h·∫°n ng√¢n s√°ch"
                }
            }
            
            // Time warnings
            message.contains("days left") || message.contains("day left") -> {
                val days = extractDays(message)
                if (days != null) {
                    when {
                        days <= 1 -> "‚è∞ C√≤n $days ng√†y - S·∫Øp h·∫øt h·∫°n!"
                        days <= 3 -> "‚è≥ C√≤n $days ng√†y - G·∫ßn h·∫øt h·∫°n"
                        days <= 7 -> "üìÖ C√≤n $days ng√†y"
                        else -> "üìÜ C√≤n $days ng√†y"
                    }
                } else message
            }
            
            // Percentage patterns
            message.matches(Regex(""".*(\d+)%.*used.*""")) -> {
                val percentage = extractPercentage(message)
                if (percentage != null) {
                    when {
                        percentage >= 95 -> "üî• ƒê√£ d√πng ${percentage}% - G·∫ßn c·∫°n ki·ªát!"
                        percentage >= 90 -> "üö® ƒê√£ d√πng ${percentage}% - Nguy hi·ªÉm!"
                        percentage >= 80 -> "‚ö†Ô∏è ƒê√£ d√πng ${percentage}% - C·∫ßn c·∫©n tr·ªçng"
                        percentage >= 70 -> "üìä ƒê√£ d√πng ${percentage}% - Ch√∫ √Ω"
                        percentage >= 50 -> "üìà ƒê√£ d√πng ${percentage}% - T·ªët"
                        else -> "üíö ƒê√£ d√πng ${percentage}% - C√≤n nhi·ªÅu"
                    }
                } else message
            }
            
            // Simple amount messages
            message.matches(Regex("""\$[0-9,]+\.?[0-9]*""")) -> "üí∞ Chi ti√™u: $message"
            
            // Default
            else -> message
        }
    }
    
    /**
     * Convert currency amounts in messages from VND (backend) to user's preferred currency
     */
    private fun convertCurrencyInMessage(
        message: String,
        isVND: Boolean,
        exchangeRates: CurrencyRates?
    ): String {
        // Patterns for different currency formats
        val patterns = listOf(
            // USD format: $123.45, $1,234.56
            Regex("""\$([0-9,]+\.?[0-9]*)""") to false,
            // VND with symbol: 123‚Ç´, 1,234‚Ç´
            Regex("""([0-9,]+\.?[0-9]*)[‚Ç´ƒë]""") to true,
            // VND with word: 123 VND, 1,234 VND
            Regex("""([0-9,]+\.?[0-9]*)\s*VND""") to true,
            // Large numbers (assume VND): 123456, 1,234,567
            Regex("""\b([0-9]{4,}(?:,[0-9]{3})*)\b""") to true
        )
        
        var result = message
        
        patterns.forEach { (regex, isSourceVND) ->
            result = regex.replace(result) { matchResult ->
                val amountStr = matchResult.groupValues[1].replace(",", "")
                val amount = amountStr.toDoubleOrNull() ?: return@replace matchResult.value
                
                // Convert currency if needed
                val convertedAmount = when {
                    isSourceVND && !isVND -> {
                        // Convert VND to USD
                        val rate = exchangeRates?.usdToVnd ?: 24000.0
                        CurrencyUtils.vndToUsd(amount, rate)
                    }
                    !isSourceVND && isVND -> {
                        // Convert USD to VND
                        val rate = exchangeRates?.usdToVnd ?: 24000.0
                        CurrencyUtils.usdToVnd(amount, rate)
                    }
                    else -> amount // Same currency
                }
                
                // Format in target currency
                CurrencyUtils.formatAmount(convertedAmount, isVND)
            }
        }
        
        return result
    }
    
    /**
     * Extract currency amounts from message
     */
    private fun extractAmounts(message: String): List<String> {
        val regex = Regex("""\$([0-9,]+\.?[0-9]*)|([0-9,]+\.?[0-9]*)[‚Ç´ƒë]|([0-9,]+\.?[0-9]*)\s*VND""")
        return regex.findAll(message).map { match ->
            match.groupValues.find { it.isNotEmpty() && it != match.value } ?: match.value
        }.toList()
    }
    
    /**
     * Extract percentage from message
     */
    private fun extractPercentage(message: String): Int? {
        val regex = Regex("""(\d+)%""")
        return regex.find(message)?.groupValues?.get(1)?.toIntOrNull()
    }
    
    /**
     * Extract days from message
     */
    private fun extractDays(message: String): Int? {
        val regex = Regex("""(\d+)\s*days?\s*left""")
        return regex.find(message)?.groupValues?.get(1)?.toIntOrNull()
    }
    
    /**
     * Check if text contains Vietnamese characters
     */
    private fun containsVietnamese(text: String): Boolean {
        val vietnameseChars = setOf(
            '√†', '√°', '·∫°', '·∫£', '√£', '√¢', '·∫ß', '·∫•', '·∫≠', '·∫©', '·∫´', 'ƒÉ', '·∫±', '·∫Ø', '·∫∑', '·∫≥', '·∫µ',
            '√®', '√©', '·∫π', '·∫ª', '·∫Ω', '√™', '·ªÅ', '·∫ø', '·ªá', '·ªÉ', '·ªÖ',
            '√¨', '√≠', '·ªã', '·ªâ', 'ƒ©',
            '√≤', '√≥', '·ªç', '·ªè', '√µ', '√¥', '·ªì', '·ªë', '·ªô', '·ªï', '·ªó', '∆°', '·ªù', '·ªõ', '·ª£', '·ªü', '·ª°',
            '√π', '√∫', '·ª•', '·ªß', '≈©', '∆∞', '·ª´', '·ª©', '·ª±', '·ª≠', '·ªØ',
            '·ª≥', '√Ω', '·ªµ', '·ª∑', '·ªπ', 'ƒë'
        )
        return text.any { it.lowercaseChar() in vietnameseChars }
    }
}
